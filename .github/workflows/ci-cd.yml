name: Claude Voice Integration CI/CD

on:
  push:
    branches: [ master, develop ]
    paths:
      - '.tmux/claude/**'
      - '.tmux/tests/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ master ]
    paths:
      - '.tmux/claude/**'
      - '.tmux/tests/**'

env:
  CLAUDE_VOICE_HOME: ${{ github.workspace }}/.tmux/claude

jobs:
  # Linting and Static Analysis
  lint:
    name: Lint and Static Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Shell Check
        run: |
          sudo apt-get update
          sudo apt-get install -y shellcheck

      - name: Lint Shell Scripts
        run: |
          find .tmux/claude -name "*.sh" -type f | xargs shellcheck -e SC1090,SC1091
          find .tmux/scripts -name "*.sh" -type f | xargs shellcheck -e SC1090,SC1091 || true
          find .tmux/tests -name "*.sh" -type f | xargs shellcheck -e SC1090,SC1091

      - name: Check Script Permissions
        run: |
          echo "Checking executable permissions..."
          find .tmux/claude -name "*.sh" -type f ! -executable | tee non_executable.txt
          if [ -s non_executable.txt ]; then
            echo "❌ Found non-executable shell scripts:"
            cat non_executable.txt
            exit 1
          else
            echo "✅ All shell scripts have correct permissions"
          fi

      - name: YAML Lint
        run: |
          sudo apt-get install -y yamllint
          find .tmux/claude -name "*.yaml" -o -name "*.yml" | xargs yamllint -d relaxed

  # Unit and Integration Tests
  test:
    name: Unit and Integration Tests
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      matrix:
        test-suite:
          - unit
          - integration
          - advanced
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Test Environment
        run: |
          # Create necessary directories
          mkdir -p $CLAUDE_VOICE_HOME/logs
          mkdir -p $CLAUDE_VOICE_HOME/tests/output
          
          # Install dependencies
          sudo apt-get update
          sudo apt-get install -y jq curl bc

      - name: Setup Mock Ollama for Testing
        run: |
          # Create mock ollama for testing
          sudo tee /usr/local/bin/ollama > /dev/null << 'EOF'
          #!/bin/bash
          case "$1" in
            "list")
              echo '{"models": [{"name": "phi4-mini:latest"}]}'
              ;;
            "ps")
              echo '{"models": []}'
              ;;
            "pull")
              echo "✅ Pulling $2..."
              sleep 1
              echo "✅ Success"
              ;;
            *)
              echo "Mock Ollama: $*"
              ;;
          esac
          EOF
          sudo chmod +x /usr/local/bin/ollama

      - name: Run ${{ matrix.test-suite }} Tests
        run: |
          cd .tmux/claude/tests
          chmod +x test_runner.sh
          
          # Set test mode
          export CLAUDE_VOICE_TEST_MODE=true
          export CI=true
          
          case "${{ matrix.test-suite }}" in
            "unit")
              ./test_runner.sh unit
              ;;
            "integration") 
              ./test_runner.sh integration
              ;;
            "advanced")
              ./test_runner.sh advanced
              ;;
          esac

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.test-suite }}
          path: |
            .tmux/claude/tests/output/
            .tmux/claude/logs/
          retention-days: 7

  # Security Testing
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Security Scan - Secrets Detection
        run: |
          echo "Scanning for potential secrets..."
          if grep -r -E "(password|secret|key|token)" .tmux/claude/ --include="*.sh" --include="*.conf" --include="*.yaml" | grep -v "# " | grep -v "example"; then
            echo "❌ Potential secrets found in code"
            exit 1
          else
            echo "✅ No secrets detected"
          fi

      - name: Security Scan - Command Injection
        run: |
          echo "Scanning for potential command injection vulnerabilities..."
          if grep -r -E '\$\(' .tmux/claude/ --include="*.sh" | grep -E 'eval|exec' | grep -v "# "; then
            echo "⚠️ Potential command injection patterns found - manual review required"
          else
            echo "✅ No obvious command injection patterns detected"
          fi

      - name: File Permission Check
        run: |
          echo "Checking file permissions for security..."
          find .tmux/claude -type f -perm /o+w | tee world_writable.txt
          if [ -s world_writable.txt ]; then
            echo "❌ Found world-writable files:"
            cat world_writable.txt
            exit 1
          else
            echo "✅ No world-writable files found"
          fi

  # Performance Testing
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Performance Test Environment
        run: |
          mkdir -p $CLAUDE_VOICE_HOME/logs
          mkdir -p $CLAUDE_VOICE_HOME/tests/output
          sudo apt-get update
          sudo apt-get install -y time bc

      - name: Module Load Performance Test
        run: |
          cd .tmux/claude/core
          echo "Testing module load times..."
          
          for module in *.sh; do
            if [ -f "$module" ]; then
              echo "Testing $module..."
              start_time=$(date +%s%3N)
              bash -n "$module"
              end_time=$(date +%s%3N)
              duration=$((end_time - start_time))
              echo "$module: ${duration}ms"
              
              # Fail if any module takes more than 1 second to parse
              if [ $duration -gt 1000 ]; then
                echo "❌ $module parsing took too long: ${duration}ms"
                exit 1
              fi
            fi
          done

      - name: Test Suite Performance
        run: |
          cd .tmux/claude/tests
          export CLAUDE_VOICE_TEST_MODE=true
          export CI=true
          
          echo "Measuring test suite execution time..."
          start_time=$(date +%s)
          timeout 300 ./test_runner.sh unit || echo "Tests completed or timed out"
          end_time=$(date +%s)
          duration=$((end_time - start_time))
          
          echo "Test suite duration: ${duration}s"
          
          # Fail if tests take more than 4 minutes
          if [ $duration -gt 240 ]; then
            echo "❌ Test suite took too long: ${duration}s"
            exit 1
          else
            echo "✅ Test suite performance acceptable: ${duration}s"
          fi

  # Documentation and Integration Check
  docs-and-integration:
    name: Documentation and Integration
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Documentation Check
        run: |
          echo "Checking documentation completeness..."
          
          # Check if all modules have documentation
          missing_docs=""
          for module in .tmux/claude/core/*.sh; do
            module_name=$(basename "$module")
            if ! head -20 "$module" | grep -q "^#.*[説明詳細機能]"; then
              missing_docs="$missing_docs $module_name"
            fi
          done
          
          if [ -n "$missing_docs" ]; then
            echo "❌ Modules missing documentation headers:$missing_docs"
            exit 1
          else
            echo "✅ All modules have documentation"
          fi

      - name: Configuration Validation
        run: |
          echo "Validating configuration files..."
          
          # Check YAML syntax
          if [ -f .tmux/claude/config/claude-voice.yaml ]; then
            python3 -c "import yaml; yaml.safe_load(open('.tmux/claude/config/claude-voice.yaml'))"
            echo "✅ YAML configuration is valid"
          fi
          
          # Check legacy config format
          if [ -f .tmux/claude/config/claude-voice.conf ]; then
            if grep -q "^\[" .tmux/claude/config/claude-voice.conf; then
              echo "✅ Legacy configuration format is valid"
            else
              echo "❌ Legacy configuration format is invalid"
              exit 1
            fi
          fi

      - name: Integration Dependencies Check
        run: |
          echo "Checking integration dependencies..."
          
          # Check for required commands in scripts
          required_commands="bash curl jq"
          missing_commands=""
          
          for cmd in $required_commands; do
            if ! command -v "$cmd" >/dev/null 2>&1; then
              missing_commands="$missing_commands $cmd"
            fi
          done
          
          if [ -n "$missing_commands" ]; then
            echo "❌ Missing required commands:$missing_commands"
            exit 1
          else
            echo "✅ All required commands available"
          fi

  # Build and Package
  build:
    name: Build and Package
    runs-on: ubuntu-latest
    needs: [test, security, performance, docs-and-integration]
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create Release Package
        run: |
          echo "Creating release package..."
          
          # Create distribution directory
          mkdir -p dist/claude-voice-integration
          
          # Copy core files
          cp -r .tmux/claude/core dist/claude-voice-integration/
          cp -r .tmux/claude/config dist/claude-voice-integration/
          cp -r .tmux/claude/tests dist/claude-voice-integration/
          
          # Copy documentation
          cp .tmux/ARCHITECTURE.md dist/claude-voice-integration/ || true
          cp .tmux/WSL-INTEGRATION-GUIDE.md dist/claude-voice-integration/ || true
          
          # Create installation script
          cat > dist/claude-voice-integration/install.sh << 'EOF'
          #!/bin/bash
          set -euo pipefail
          
          INSTALL_DIR="${HOME}/.tmux/claude"
          
          echo "Installing Claude Voice Integration..."
          
          # Create directories
          mkdir -p "$INSTALL_DIR"/{core,config,logs,tests}
          
          # Copy files
          cp -r core/* "$INSTALL_DIR/core/"
          cp -r config/* "$INSTALL_DIR/config/"
          cp -r tests/* "$INSTALL_DIR/tests/"
          
          # Set permissions
          chmod +x "$INSTALL_DIR"/core/*.sh
          chmod +x "$INSTALL_DIR"/tests/*.sh
          
          echo "✅ Claude Voice Integration installed successfully"
          echo "Run tests with: cd $INSTALL_DIR/tests && ./test_runner.sh unit"
          EOF
          
          chmod +x dist/claude-voice-integration/install.sh
          
          # Create archive
          cd dist
          tar -czf claude-voice-integration-$(date +%Y%m%d).tar.gz claude-voice-integration/
          
          echo "Package created: claude-voice-integration-$(date +%Y%m%d).tar.gz"

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: claude-voice-integration-build
          path: dist/
          retention-days: 30

  # Health Check and Monitoring
  health-check:
    name: Post-deployment Health Check
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Health Check Environment
        run: |
          mkdir -p $CLAUDE_VOICE_HOME/logs
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Run Health Diagnostics
        run: |
          cd .tmux/claude/tests
          export CLAUDE_VOICE_TEST_MODE=true
          export CI=true
          
          # Run health check if available
          if [ -f "../core/health_diagnostics.sh" ]; then
            echo "Running health diagnostics..."
            source ../core/health_diagnostics.sh
            
            if declare -f run_health_check >/dev/null 2>&1; then
              run_health_check || echo "Health check completed with warnings"
            else
              echo "Health check function not available"
            fi
          else
            echo "Health diagnostics module not found"
          fi

      - name: System Resource Check
        run: |
          echo "Checking system resources..."
          
          # Memory usage
          free -h
          
          # Disk usage  
          df -h
          
          # Process count
          ps aux | wc -l
          
          echo "✅ System resource check completed"

  # Notification and Reporting
  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [test, security, performance, docs-and-integration, build, health-check]
    if: always()
    steps:
      - name: Determine Status
        id: status
        run: |
          if [[ "${{ needs.test.result }}" == "success" && 
                "${{ needs.security.result }}" == "success" && 
                "${{ needs.performance.result }}" == "success" && 
                "${{ needs.docs-and-integration.result }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "message=✅ All CI/CD checks passed" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "message=❌ Some CI/CD checks failed" >> $GITHUB_OUTPUT
          fi

      - name: Create Summary Report
        run: |
          echo "# Claude Voice Integration CI/CD Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Pipeline Status: ${{ steps.status.outputs.status }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Job Results:" >> $GITHUB_STEP_SUMMARY
          echo "- **Lint**: ${{ needs.lint.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tests**: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Security**: ${{ needs.security.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Performance**: ${{ needs.performance.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Documentation**: ${{ needs.docs-and-integration.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build**: ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Health Check**: ${{ needs.health-check.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Message**: ${{ steps.status.outputs.message }}" >> $GITHUB_STEP_SUMMARY