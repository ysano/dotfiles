name: Nightly Quality Assurance

on:
  schedule:
    # Run nightly at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  CLAUDE_VOICE_HOME: ${{ github.workspace }}/.tmux/claude

jobs:
  extended-testing:
    name: Extended Quality Tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        test-category:
          - smoke
          - stress
          - compatibility
          - regression
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Extended Test Environment
        run: |
          # Install comprehensive dependencies
          sudo apt-get update
          sudo apt-get install -y \
            bash \
            curl \
            jq \
            bc \
            yamllint \
            shellcheck \
            tmux \
            git \
            time \
            strace \
            htop \
            valgrind

          # Create test environment
          mkdir -p $CLAUDE_VOICE_HOME/logs
          mkdir -p $CLAUDE_VOICE_HOME/tests/output

      - name: Run ${{ matrix.test-category }} Tests
        run: |
          cd .tmux/claude/tests
          export CLAUDE_VOICE_TEST_MODE=true
          export CI=true
          export NIGHTLY_TEST=true
          
          case "${{ matrix.test-category }}" in
            "smoke")
              echo "üö≠ Running smoke tests..."
              # Quick verification that core functionality works
              ./test_runner.sh unit --quick
              
              # Test basic module imports
              for module in ../core/*.sh; do
                if [ -f "$module" ]; then
                  echo "Testing import: $(basename "$module")"
                  bash -n "$module" || echo "‚ùå Syntax error in $module"
                fi
              done
              ;;
              
            "stress")
              echo "üí™ Running stress tests..."
              
              # Concurrent test execution
              echo "Testing concurrent execution..."
              for i in {1..5}; do
                (./test_runner.sh unit >/dev/null 2>&1) &
              done
              wait
              
              # Large data processing
              echo "Testing large data processing..."
              cd ../core
              if [ -f "stats_monitor.sh" ]; then
                source stats_monitor.sh
                
                # Generate large test data
                for i in {1..1000}; do
                  echo "{\"timestamp\":$(date +%s),\"operation\":\"test_$i\",\"duration\":$((RANDOM % 10))}" >> ../logs/stress_test.jsonl
                done
                
                # Test processing
                if declare -f record_usage_stats >/dev/null 2>&1; then
                  echo "Testing stats processing under load..."
                  time record_usage_stats "stress_test" "test_model" "linux" "5" "true" || true
                fi
              fi
              ;;
              
            "compatibility")
              echo "üîÑ Running compatibility tests..."
              
              # Test different shell environments
              for shell in bash dash; do
                if command -v "$shell" >/dev/null 2>&1; then
                  echo "Testing with $shell..."
                  $shell -n ../core/*.sh || echo "‚ùå Compatibility issue with $shell"
                fi
              done
              
              # Test different tmux versions
              echo "Current tmux version:"
              tmux -V || echo "tmux not available"
              
              # Test WSL compatibility simulation
              echo "Testing WSL compatibility simulation..."
              export FAKE_WSL=1
              ./test_runner.sh unit --wsl-sim || true
              ;;
              
            "regression")
              echo "üîÑ Running regression tests..."
              
              # Test against known good configurations
              echo "Testing configuration regression..."
              
              # Backup current config
              if [ -f "../config/claude-voice.yaml" ]; then
                cp ../config/claude-voice.yaml ../config/claude-voice.yaml.backup
              fi
              
              # Test with minimal config
              cat > ../config/test-minimal.yaml << 'EOF'
          integration:
            enabled: true
          llm:
            provider: ollama
          voice:
            manual:
              mode: auto
          EOF
              
              export CLAUDE_CONFIG_FILE="../config/test-minimal.yaml"
              ./test_runner.sh unit || echo "‚ùå Minimal config test failed"
              
              # Test with maximal config
              cat > ../config/test-maximal.yaml << 'EOF'
          integration:
            enabled: true
            features:
              - voice_synthesis
              - text_analysis
              - error_reporting
              - statistics
          llm:
            provider: ollama
            models:
              primary: "phi4-mini:latest"
              fallback: "orca-mini:3b"
            timeout: 30
            max_retries: 3
          voice:
            manual:
              mode: powershell
            settings:
              volume: 80
              speed: 1.0
            engines:
              windows: ["sapi", "powershell"]
              linux: ["espeak", "festival"]
              macos: ["say"]
          stats:
            enabled: true
            detailed: true
            export_format: "json"
          EOF
              
              export CLAUDE_CONFIG_FILE="../config/test-maximal.yaml"
              ./test_runner.sh unit || echo "‚ùå Maximal config test failed"
              
              # Restore backup
              if [ -f "../config/claude-voice.yaml.backup" ]; then
                mv ../config/claude-voice.yaml.backup ../config/claude-voice.yaml
              fi
              ;;
          esac

      - name: Performance Profiling
        if: matrix.test-category == 'stress'
        run: |
          echo "üìä Performance profiling..."
          cd .tmux/claude/tests
          
          # Memory usage profiling
          echo "Memory usage profiling:"
          /usr/bin/time -v ./test_runner.sh unit 2>&1 | grep -E "(Maximum resident|User time|System time|Percent of CPU)"
          
          # I/O profiling
          echo "I/O profiling:"
          strace -c -f ./test_runner.sh unit 2>&1 | tail -20 || echo "strace profiling completed"

      - name: Coverage Analysis
        if: matrix.test-category == 'regression'
        run: |
          echo "üìà Analyzing test coverage..."
          cd .tmux/claude
          
          # Function coverage analysis
          echo "Analyzing function coverage..."
          
          total_functions=0
          tested_functions=0
          
          for module in core/*.sh; do
            if [ -f "$module" ]; then
              module_name=$(basename "$module")
              echo "Analyzing $module_name..."
              
              # Extract function definitions
              functions=$(grep -E "^[a-zA-Z_][a-zA-Z0-9_]*\(\)" "$module" | wc -l)
              total_functions=$((total_functions + functions))
              
              # Check if tests exist for this module
              test_file="tests/test_${module_name}"
              if [ -f "$test_file" ]; then
                tested=$(grep -E "test_.*\(\)" "$test_file" | wc -l)
                tested_functions=$((tested_functions + tested))
                echo "  Functions: $functions, Tests: $tested"
              else
                echo "  Functions: $functions, Tests: 0 (no test file)"
              fi
            fi
          done
          
          if [ $total_functions -gt 0 ]; then
            coverage=$((tested_functions * 100 / total_functions))
            echo "Overall function coverage: $coverage% ($tested_functions/$total_functions)"
          fi

      - name: Upload Test Artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: nightly-test-results-${{ matrix.test-category }}
          path: |
            .tmux/claude/tests/output/
            .tmux/claude/logs/
          retention-days: 7

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deep Security Scan
        run: |
          echo "üîí Running deep security scan..."
          
          # File permission audit
          echo "Checking file permissions..."
          find .tmux/claude -type f -perm /022 | tee suspicious_permissions.txt
          if [ -s suspicious_permissions.txt ]; then
            echo "‚ö†Ô∏è Files with suspicious permissions found"
            cat suspicious_permissions.txt
          fi
          
          # SUID/SGID check
          echo "Checking for SUID/SGID files..."
          find .tmux/claude -type f \( -perm -4000 -o -perm -2000 \) | tee suid_files.txt
          if [ -s suid_files.txt ]; then
            echo "‚ùå SUID/SGID files found"
            cat suid_files.txt
            exit 1
          fi

      - name: Code Vulnerability Scan
        run: |
          echo "üîç Scanning for code vulnerabilities..."
          
          # Command injection patterns
          echo "Checking for command injection patterns..."
          if find .tmux/claude -name "*.sh" -exec grep -H -E '\$\([^)]*\$' {} \; | grep -v "# "; then
            echo "‚ö†Ô∏è Potential command injection patterns found"
          fi
          
          # Unsafe temp file usage
          echo "Checking for unsafe temp file usage..."
          if find .tmux/claude -name "*.sh" -exec grep -H "/tmp/" {} \; | grep -v "\$\$" | grep -v "# "; then
            echo "‚ö†Ô∏è Potentially unsafe temp file usage found"
          fi
          
          # Hardcoded secrets/passwords
          echo "Checking for hardcoded secrets..."
          if find .tmux/claude -name "*.sh" -exec grep -H -i -E "(password|secret|key|token)" {} \; | grep -v "# " | grep -v "example"; then
            echo "‚ö†Ô∏è Potential hardcoded secrets found"
          fi

      - name: Configuration Security Audit
        run: |
          echo "‚öôÔ∏è Auditing configuration security..."
          
          # Check YAML configurations for security issues
          if [ -f ".tmux/claude/config/claude-voice.yaml" ]; then
            echo "Checking YAML configuration..."
            
            # Check for unsafe configurations
            if grep -i -E "(debug.*true|log_level.*debug)" .tmux/claude/config/claude-voice.yaml; then
              echo "‚ö†Ô∏è Debug mode enabled in configuration"
            fi
            
            # Check for exposed endpoints
            if grep -E "http://[^/]" .tmux/claude/config/claude-voice.yaml; then
              echo "‚ö†Ô∏è Non-HTTPS endpoints found in configuration"
            fi
          fi

  dependency-audit:
    name: Dependency Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Audit System Dependencies
        run: |
          echo "üì¶ Auditing system dependencies..."
          
          # Check required commands and their versions
          commands="bash curl jq tmux git"
          
          for cmd in $commands; do
            if command -v "$cmd" >/dev/null 2>&1; then
              version=$($cmd --version 2>/dev/null | head -1 || echo "version unknown")
              echo "$cmd: $version"
              
              # Check for known vulnerable versions (example)
              case "$cmd" in
                "bash")
                  # Check for shellshock vulnerability (bash < 4.3)
                  bash_version=$(bash --version | head -1 | grep -o '[0-9]\+\.[0-9]\+' | head -1)
                  if [ -n "$bash_version" ] && [ "$(echo "$bash_version < 4.3" | bc -l)" -eq 1 ]; then
                    echo "‚ùå Vulnerable bash version detected: $bash_version"
                  fi
                  ;;
                "curl")
                  # Basic curl version check
                  curl_version=$(curl --version | head -1 | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+' | head -1)
                  echo "curl version: $curl_version"
                  ;;
              esac
            else
              echo "‚ùå Missing required command: $cmd"
            fi
          done

      - name: Network Security Check
        run: |
          echo "üåê Checking network security configurations..."
          
          # Check for hardcoded IPs or URLs
          if find .tmux/claude -name "*.sh" -exec grep -H -E "[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}" {} \; | grep -v "127.0.0.1" | grep -v "# "; then
            echo "‚ö†Ô∏è Hardcoded IP addresses found"
          fi
          
          # Check for HTTP (non-HTTPS) URLs
          if find .tmux/claude -name "*.sh" -exec grep -H "http://[^/]" {} \; | grep -v "# "; then
            echo "‚ö†Ô∏è Non-HTTPS URLs found"
          fi

  compatibility-matrix:
    name: Compatibility Testing
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, ubuntu-22.04, ubuntu-latest]
        shell: [bash, dash]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Environment
        run: |
          # Install dependencies
          sudo apt-get update
          sudo apt-get install -y bash dash curl jq bc tmux git
          mkdir -p $CLAUDE_VOICE_HOME/logs

      - name: Test Shell Compatibility
        run: |
          echo "Testing with ${{ matrix.shell }} on ${{ matrix.os }}..."
          
          cd .tmux/claude/tests
          export CLAUDE_VOICE_TEST_MODE=true
          export CI=true
          
          # Test syntax with specific shell
          echo "Checking syntax compatibility..."
          for script in ../core/*.sh; do
            if [ -f "$script" ]; then
              echo "Testing $(basename "$script") with ${{ matrix.shell }}..."
              ${{ matrix.shell }} -n "$script" || echo "‚ùå Syntax error in $script with ${{ matrix.shell }}"
            fi
          done

      - name: Run Compatibility Tests
        run: |
          cd .tmux/claude/tests
          
          # Run tests with specific shell
          ${{ matrix.shell }} test_runner.sh unit || echo "Tests completed with some issues on ${{ matrix.shell }}"

  report-generation:
    name: Generate Quality Report
    runs-on: ubuntu-latest
    needs: [extended-testing, security-audit, dependency-audit, compatibility-matrix]
    if: always()
    steps:
      - name: Download All Artifacts
        uses: actions/download-artifact@v4

      - name: Generate Comprehensive Report
        run: |
          echo "üìä Generating nightly quality report..."
          
          cat > nightly-report.md << 'EOF'
          # Nightly Quality Assurance Report
          
          **Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          **Commit**: ${{ github.sha }}
          
          ## Test Results Summary
          
          ### Extended Testing
          - **Smoke Tests**: ${{ needs.extended-testing.result }}
          - **Stress Tests**: ${{ needs.extended-testing.result }}
          - **Compatibility Tests**: ${{ needs.extended-testing.result }}
          - **Regression Tests**: ${{ needs.extended-testing.result }}
          
          ### Security Audit
          - **Security Scan**: ${{ needs.security-audit.result }}
          - **Dependency Audit**: ${{ needs.dependency-audit.result }}
          
          ### Compatibility Matrix
          - **Multi-OS Testing**: ${{ needs.compatibility-matrix.result }}
          
          ## Recommendations
          
          EOF
          
          # Add recommendations based on results
          if [[ "${{ needs.security-audit.result }}" != "success" ]]; then
            echo "- üîí Review security audit findings" >> nightly-report.md
          fi
          
          if [[ "${{ needs.extended-testing.result }}" != "success" ]]; then
            echo "- üß™ Investigate test failures" >> nightly-report.md
          fi
          
          if [[ "${{ needs.compatibility-matrix.result }}" != "success" ]]; then
            echo "- üîÑ Address compatibility issues" >> nightly-report.md
          fi
          
          if [[ "${{ needs.security-audit.result }}" == "success" && 
                "${{ needs.extended-testing.result }}" == "success" && 
                "${{ needs.compatibility-matrix.result }}" == "success" ]]; then
            echo "- ‚úÖ All quality checks passed successfully" >> nightly-report.md
          fi
          
          echo "Report generated: nightly-report.md"
          cat nightly-report.md

      - name: Upload Quality Report
        uses: actions/upload-artifact@v4
        with:
          name: nightly-quality-report
          path: nightly-report.md
          retention-days: 30