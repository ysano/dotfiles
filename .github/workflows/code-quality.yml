name: Code Quality Supplementary Checks

on:
  pull_request:
    branches: [ master, develop ]
    paths:
      - '.tmux/claude/**'
      - '.tmux/tests/**'
  workflow_dispatch:

env:
  CLAUDE_VOICE_HOME: ${{ github.workspace }}/.tmux/claude

jobs:
  # Naming convention enforcement
  naming-conventions:
    name: Naming Convention Enforcement
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run naming convention checker
        run: |
          cd .tmux/claude/scripts
          if [[ -f check_naming_conventions.sh ]]; then
            chmod +x check_naming_conventions.sh
            ./check_naming_conventions.sh
          else
            echo "‚ö†Ô∏è Naming convention checker not found"
          fi

  # API compatibility check
  api-compatibility:
    name: API Compatibility Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check function signatures
        run: |
          echo "üîÑ Checking API compatibility..."
          
          # Extract all function signatures
          find .tmux/claude/core -name "*.sh" -type f -exec grep -n "^[a-zA-Z_][a-zA-Z0-9_]*() *{" {} + > current-api.txt
          
          # Check for backward compatibility breaking changes
          deprecated_functions=$(grep -r "deprecated" .tmux/claude/core --include="*.sh" | wc -l)
          echo "Deprecated functions found: $deprecated_functions"
          
          # Validate that deprecated functions still exist
          if [[ $deprecated_functions -gt 0 ]]; then
            echo "‚ö†Ô∏è Found deprecated functions - ensure backward compatibility"
          fi

  # Module dependency validation
  dependency-validation:
    name: Module Dependency Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate module dependencies
        run: |
          echo "üîó Validating module dependencies..."
          
          cd .tmux/claude/core
          
          # Check for circular dependencies
          echo "Checking for circular dependencies..."
          for module in *.sh; do
            if [[ -f "$module" ]]; then
              # Extract source/require statements
              deps=$(grep -o "source.*\.sh\|require.*\.sh" "$module" 2>/dev/null || true)
              if [[ -n "$deps" ]]; then
                echo "$module dependencies: $deps"
              fi
            fi
          done
          
          # Validate all dependencies exist
          missing_deps=0
          for module in *.sh; do
            if [[ -f "$module" ]]; then
              while read -r dep_line; do
                if [[ "$dep_line" =~ source.*\"([^\"]+)\" ]]; then
                  dep_file="${BASH_REMATCH[1]}"
                  if [[ ! -f "$dep_file" ]] && [[ ! -f "$(basename "$dep_file")" ]]; then
                    echo "‚ùå Missing dependency: $dep_file (required by $module)"
                    missing_deps=1
                  fi
                fi
              done < <(grep "source.*\.sh" "$module" 2>/dev/null || true)
            fi
          done
          
          if [[ $missing_deps -eq 1 ]]; then
            exit 1
          fi

  # Quick documentation check
  documentation-check:
    name: Documentation Quick Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check critical documentation
        run: |
          echo "üìö Checking critical documentation..."
          
          # Check naming conventions documentation
          if [[ ! -f .tmux/claude/NAMING_CONVENTIONS.md ]]; then
            echo "‚ùå Missing NAMING_CONVENTIONS.md"
            exit 1
          fi
          
          # Check if modules have header comments
          missing_headers=0
          find .tmux/claude/core -name "*.sh" -type f | while read -r script; do
            if ! head -5 "$script" | grep -q "^# .*-"; then
              echo "‚ö†Ô∏è $script missing header comment"
              missing_headers=1
            fi
          done
          
          echo "‚úÖ Documentation check completed"