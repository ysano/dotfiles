=== Claude Voice Test Suite ===
開始時刻: #午後

[0;34mℹ️  INFO[0m: テスト環境初期化完了
[0;34mℹ️  INFO[0m: CLAUDE_VOICE_HOME: /Users/yoshiaki_sano/.tmux/claude
[0;34mℹ️  INFO[0m: テストレポート: /Users/yoshiaki_sano/.tmux/claude/tests/output/test_report_20250724_160630.txt
[0;34mℹ️  INFO[0m: === 単体テスト開始 ===
[0;34mℹ️  INFO[0m: test_user_interface.sh 実行中...
✅ User interface test passed (file structure check)
[0;32m✅ PASS[0m: test_user_interface.sh
[0;34mℹ️  INFO[0m: test_stats_monitor.sh 実行中...
stats_monitor.sh Unit Test
=========================
=== モジュール読み込みテスト ===
✅ PASS: 構文チェック
✅ PASS: モジュール読み込み

=== 関数存在チェックテスト ===
✅ PASS: 必須関数: record_usage_stats
✅ PASS: 必須関数: show_stats
✅ PASS: 必須関数: export_stats
✅ PASS: 必須関数: analyze_usage_patterns
✅ PASS: 必須関数: calculate_stats_summary
✅ PASS: 必須関数: format_stats_output

=== 統計記録機能テスト ===
✅ PASS: 統計記録実行
✅ PASS: 統計ファイル作成
✅ PASS: 統計データ形式

=== 統計表示機能テスト ===
✅ PASS: 統計表示に統計情報が含まれる
✅ PASS: 統計表示に成功率が含まれる
✅ PASS: 統計表示に使用回数が含まれる

=== 統計エクスポート機能テスト ===
✅ PASS: 統計エクスポート実行
✅ PASS: エクスポートファイル作成
✅ PASS: CSVヘッダー形式

=== 使用パターン分析テスト ===
✅ PASS: パターン分析結果が含まれる

=== 統計計算機能テスト ===
✅ PASS: 統計計算結果に数値が含まれる

=== エラーハンドリングテスト ===
✅ PASS: 存在しないファイルでの適切なエラーハンドリング

=== パフォーマンステスト ===
✅ PASS: show_stats実行時間: 0s (< 5s)

=== テスト結果サマリー ===
総テスト数: 21
成功: 21
失敗: 0
成功率: 100%
🎉 stats_monitor.sh: 全テスト成功！
[0;32m✅ PASS[0m: test_stats_monitor.sh
[0;34mℹ️  INFO[0m: test_config_manager.sh 実行中...
config_manager.sh Unit Test
==========================
=== モジュール読み込みテスト ===
✅ PASS: 構文チェック
✅ PASS: モジュール読み込み

=== 関数存在チェックテスト ===
✅ PASS: 必須関数: manage_config
✅ PASS: 必須関数: manage_legacy_config
✅ PASS: 必須関数: manage_yaml_config
✅ PASS: 必須関数: create_default_config
✅ PASS: 必須関数: validate_legacy_config
✅ PASS: 必須関数: validate_yaml_config
✅ PASS: 必須関数: repair_configuration
✅ PASS: 必須関数: get_config_value

=== 設定管理機能テスト ===
✅ PASS: 設定表示に設定ファイル情報が含まれる

=== 従来設定管理テスト ===
✅ PASS: 従来設定表示に設定ファイル名が含まれる

=== YAML設定管理テスト ===
✅ PASS: YAML設定表示にYAMLという文字が含まれる

=== デフォルト設定作成テスト ===
✅ PASS: デフォルト設定作成実行
✅ PASS: デフォルト設定ファイルが作成される
✅ PASS: LLMセクションが含まれる
✅ PASS: audioセクションが含まれる
✅ PASS: default_modelが含まれる
✅ PASS: default_voiceが含まれる

=== 従来設定検証テスト ===
✅ PASS: 検証メッセージが含まれる
✅ PASS: 正常な設定ファイルの検証成功
✅ PASS: 存在しないファイルでエラーが表示される

=== YAML設定検証テスト ===
✅ PASS: YAML検証メッセージが含まれる
✅ PASS: yq利用可能時のYAML検証成功

=== 設定修復機能テスト ===
✅ PASS: 修復メッセージが含まれる
✅ PASS: 必要なディレクトリが修復で作成される

=== 設定値取得テスト ===
✅ PASS: 設定値取得実行
✅ PASS: 正しい設定値が取得される
✅ PASS: 存在しない設定キーでデフォルト値が返される

=== エラーハンドリングテスト ===
✅ PASS: 無効な引数での適切なエラーメッセージ

=== パフォーマンステスト ===
✅ PASS: manage_config実行時間: 0s (< 3s)

=== テスト結果サマリー ===
総テスト数: 31
成功: 31
失敗: 0
成功率: 100%
🎉 config_manager.sh: 全テスト成功！
[0;32m✅ PASS[0m: test_config_manager.sh
[0;34mℹ️  INFO[0m: test_health_diagnostics.sh 実行中...
health_diagnostics.sh Unit Test
==============================
=== モジュール読み込みテスト ===
✅ PASS: 構文チェック
✅ PASS: モジュール読み込み

=== 関数存在チェックテスト ===
✅ PASS: 必須関数: run_health_check
✅ PASS: 必須関数: check_configuration_health
✅ PASS: 必須関数: check_integration_health
✅ PASS: 必須関数: check_audio_health
✅ PASS: 必須関数: check_llm_health
✅ PASS: 必須関数: check_filesystem_health
✅ PASS: 必須関数: check_dependencies_health
✅ PASS: 必須関数: run_integration_test
✅ PASS: 必須関数: run_system_test
✅ PASS: 必須関数: detect_os

=== メインヘルスチェック機能テスト ===
✅ PASS: ヘルスチェックタイトルが含まれる
✅ PASS: 設定ヘルスチェックが含まれる
✅ PASS: 音声システムヘルスチェックが含まれる
✅ PASS: ヘルススコアが含まれる
Overall Health Score: 2/6
✅ PASS: ヘルススコア形式が正しい

=== 設定ヘルスチェックテスト ===
✅ PASS: 設定ヘルスチェックメッセージ
✅ PASS: 設定ヘルススコアが有効範囲内

=== 音声システムヘルスチェックテスト ===
✅ PASS: 音声システムヘルスチェックメッセージ
✅ PASS: 音声ヘルススコアが有効範囲内
✅ PASS: macOS固有チェックが含まれる

=== LLMヘルスチェックテスト ===
✅ PASS: LLMヘルスチェックメッセージ
✅ PASS: LLMヘルススコアが有効範囲内
✅ PASS: Ollama関連チェックが含まれる

=== ファイルシステムヘルスチェックテスト ===
✅ PASS: ファイルシステムヘルスチェックメッセージ
✅ PASS: ファイルシステムヘルススコアが有効範囲内
✅ PASS: ディレクトリチェックが含まれる

=== 依存関係ヘルスチェックテスト ===
✅ PASS: 依存関係ヘルスチェックメッセージ
✅ PASS: 依存関係ヘルススコアが有効範囲内
✅ PASS: 基本依存関係チェックが含まれる

=== 統合テスト機能テスト ===
✅ PASS: 統合テストタイトルが含まれる
✅ PASS: テスト結果が含まれる
✅ PASS: 統合テスト項目が含まれる

=== システムテスト機能テスト ===
✅ PASS: システムテストタイトルが含まれる
✅ PASS: テスト結果が含まれる
✅ PASS: システムテスト項目が含まれる

=== OS検出機能テスト ===
✅ PASS: 有効なOS名が検出される: darwin

=== エラーハンドリングテスト ===
✅ PASS: 存在しない環境での適切な処理

=== パフォーマンステスト ===
✅ PASS: run_health_check実行時間: 0s (< 10s)

=== テスト結果サマリー ===
総テスト数: 40
成功: 40
失敗: 0
成功率: 100%
🎉 health_diagnostics.sh: 全テスト成功！
[0;32m✅ PASS[0m: test_health_diagnostics.sh
[0;34mℹ️  INFO[0m: test_execution_engine.sh 実行中...
execution_engine.sh Unit Test
============================
=== モジュール読み込みテスト ===
✅ PASS: 構文チェック
✅ PASS: モジュール読み込み

=== 関数存在チェックテスト ===
✅ PASS: 必須関数: main_execution_workflow
✅ PASS: 必須関数: execute_core_workflow
✅ PASS: 必須関数: execute_screen_capture
✅ PASS: 必須関数: execute_context_collection
✅ PASS: 必須関数: execute_summary_generation
✅ PASS: 必須関数: execute_voice_output
✅ PASS: 必須関数: validate_execution_arguments
✅ PASS: 必須関数: validate_summary_type
✅ PASS: 必須関数: validate_lines_parameter
✅ PASS: 必須関数: validate_voice_parameter
✅ PASS: 必須関数: validate_model_parameter
✅ PASS: 必須関数: initialize_audio_subsystem
✅ PASS: 必須関数: start_execution_timer
✅ PASS: 必須関数: end_execution_timer
✅ PASS: 必須関数: detect_os

=== メイン実行ワークフローテスト ===
[INFO] Starting claude-voice execution workflow
[DEBUG] Parameters: type=brief, lines=30, voice=auto, model=phi4-mini:latest, device=system_default
[DEBUG] Validating execution arguments
[DEBUG] Valid summary type: brief
[DEBUG] Valid lines parameter: 30
[DEBUG] Using automatic voice selection
[DEBUG] Model parameter appears valid: phi4-mini:latest
[DEBUG] All arguments validated successfully
[DEBUG] Initializing audio subsystem for OS: darwin
[DEBUG] Initializing macOS audio
[DEBUG] macOS osascript available
[DEBUG] Executing core workflow steps
[DEBUG] Starting screen capture with 30 lines
[DEBUG] Captured 61 characters
[DEBUG] Text preview: Mock screen capture: This is test content for . with 30 lines...
[DEBUG] Collecting context information
[DEBUG] Git context: Git: master (       9 changes)
[DEBUG] Generating summary with model: phi4-mini:latest, type: brief
[DEBUG] Summary generated successfully (81 characters)
🔊 音声で読み上げ中...
[DEBUG] Starting voice output with voice: auto, device: system_default
Mock universal_speak: 🤖 phi4-mini:latestで要約を生成中...
✅ 要約生成完了
Mock summary: This is a brief summary of the content using phi4-mini:latest model with voice auto
[DEBUG] Universal voice output successful
✅ 処理完了 (brief要約)
[INFO] Execution completed successfully
[INFO] Workflow completed successfully in 0s
[INFO] Execution completed: type=brief, model=phi4-mini:latest, duration=0s, success=true
[DEBUG] Cleaning up execution environment
[DEBUG] Cleanup completed
✅ PASS: ワークフロー実行が開始されました

=== 引数検証テスト ===
✅ PASS: 有効な要約タイプ: brief
✅ PASS: 有効な要約タイプ: detailed
✅ PASS: 有効な要約タイプ: technical
✅ PASS: 無効な要約タイプが適切に拒否される
✅ PASS: 有効な行数: 1
✅ PASS: 有効な行数: 50
✅ PASS: 有効な行数: 100
✅ PASS: 有効な行数: 1000
✅ PASS: 無効な行数が適切に拒否される: 0
✅ PASS: 無効な行数が適切に拒否される: 1001
✅ PASS: 無効な行数が適切に拒否される: abc
✅ PASS: 無効な行数が適切に拒否される: -5
✅ PASS: 有効な音声パラメータ: auto
✅ PASS: 有効な音声パラメータ: Kyoko
✅ PASS: 有効な音声パラメータ: Alex
✅ PASS: 有効な音声パラメータ: David
✅ PASS: 危険な文字列が適切に拒否される
✅ PASS: モデルパラメータ検証実行: auto
✅ PASS: モデルパラメータ検証実行: phi4-mini:latest
✅ PASS: モデルパラメータ検証実行: llama2:7b
✅ PASS: モデルパラメータ検証実行: orca-mini

=== コアワークフローテスト ===
✅ PASS: モック関数が実行される
✅ PASS: コアワークフローが正常終了

=== 画面キャプチャ実行テスト ===
✅ PASS: キャプチャ開始メッセージ
✅ PASS: モックキャプチャが実行される
✅ PASS: キャプチャ完了メッセージ
✅ PASS: 画面キャプチャが正常終了

=== コンテキスト収集テスト ===
✅ PASS: 作業ディレクトリ情報が含まれる
✅ PASS: Git情報が含まれる
✅ PASS: コンテキスト収集が正常終了

=== 要約生成実行テスト ===
✅ PASS: 要約生成開始メッセージ
✅ PASS: モック要約が実行される
✅ PASS: 要約生成完了メッセージ
✅ PASS: 要約生成が正常終了

=== 音声出力実行テスト ===
✅ PASS: 音声出力開始メッセージ
✅ PASS: 音声出力が正常終了

=== 音声サブシステム初期化テスト ===
✅ PASS: 音声サブシステム初期化が実行される

=== タイマー機能テスト ===
✅ PASS: 開始時刻が数値
✅ PASS: 実行時間が数値
✅ PASS: 実行時間が妥当範囲内: 1秒

=== OS検出テスト ===
✅ PASS: 有効なOS名が検出される: darwin

=== エラーハンドリングテスト ===
✅ PASS: 無効な引数が適切に拒否される

=== パフォーマンステスト ===
✅ PASS: 引数検証実行時間: 0s (<= 5s)

=== テスト結果サマリー ===
総テスト数: 61
成功: 61
失敗: 0
成功率: 100%
🎉 execution_engine.sh: 全テスト成功！
[0;32m✅ PASS[0m: test_execution_engine.sh
[0;34mℹ️  INFO[0m: === 統合テスト開始 ===
[0;34mℹ️  INFO[0m: test_module_integration.sh 実行中...
✅ Module integration test passed (file structure check)
[0;32m✅ PASS[0m: test_module_integration.sh
[0;34mℹ️  INFO[0m: test_end_to_end.sh 実行中...
Claude Voice End-to-End Test
============================

=== システム前提条件チェック ===
✅ PASS: メインバイナリが実行可能
✅ PASS: 設定ファイルが存在: claude-voice.conf
✅ PASS: 設定ファイルが存在: claude-voice.yaml
✅ PASS: ログディレクトリが存在

=== コマンドライン引数テスト ===
✅ PASS: ヘルプ表示の終了コード
✅ PASS: ヘルプにタイトルが含まれる
✅ PASS: ヘルプに使用法が含まれる
✅ PASS: バージョン表示の終了コード
✅ PASS: バージョン表示にタイトルが含まれる
✅ PASS: バージョン番号が含まれる
✅ PASS: テスト実行の終了コード
✅ PASS: テスト出力にタイトルが含まれる
✅ PASS: テスト完了メッセージが含まれる
✅ PASS: ヘルスチェック実行の終了コード
✅ PASS: ヘルスチェック出力にタイトルが含まれる

=== 要約タイプ別実行テスト ===
✅ PASS: brief 要約の終了コード
✅ PASS: brief 要約の実行確認
✅ PASS: brief 要約の完了確認
✅ PASS: detailed 要約の終了コード
✅ PASS: detailed 要約の実行確認
✅ PASS: detailed 要約の完了確認
✅ PASS: technical 要約の終了コード
✅ PASS: technical 要約の実行確認
✅ PASS: technical 要約の完了確認
✅ PASS: デフォルト実行の終了コード
✅ PASS: デフォルトでbrief要約が実行される

=== エラーハンドリングテスト ===
❌ FAIL: 無効なオプションで適切なエラーコード
   期待終了コード: 1
   実際終了コード: 0
[0;31m❌ FAIL[0m: test_end_to_end.sh
[0;34mℹ️  INFO[0m: === パフォーマンステスト ===
