#!/bin/bash
# Claude Voice - Spatial Audio CLI
# デシベルベースの空間音響配置テストツール

# 環境設定
CLAUDE_VOICE_HOME="${CLAUDE_VOICE_HOME:-$HOME/.tmux/claude}"
export CLAUDE_VOICE_HOME

# 基本モジュールの読み込み
source "$CLAUDE_VOICE_HOME/core/base.sh" 2>/dev/null || {
    echo "Error: Base module not found" >&2
    exit 1
}

# spatial_audioモジュールの読み込み
source "$CLAUDE_VOICE_HOME/core/spatial_audio.sh" 2>/dev/null || {
    echo "Error: Spatial audio module not found" >&2
    exit 1
}

# audio_managerの読み込み
source "$CLAUDE_VOICE_HOME/core/audio_manager.sh" 2>/dev/null || true

# OS固有モジュールの読み込み
if [[ "$OSTYPE" == "darwin"* ]]; then
    source "$CLAUDE_VOICE_HOME/os/darwin.sh" 2>/dev/null || true
fi

# ヘルプメッセージ
show_help() {
    cat <<EOF
Claude Voice Spatial Audio - デシベルパンニングツール

使用法: $(basename "$0") [COMMAND] [OPTIONS]

コマンド:
  detect              Claude Codeウィンドウを検出
  test [text]         空間音声テストを実行
  play <text>         指定テキストを空間配置で再生
  calc <count> <pos>  パンニング計算をテスト
  demo                デモンストレーション

例:
  $(basename "$0") detect              # ウィンドウ検出
  $(basename "$0") test                # デフォルトテスト
  $(basename "$0") play "こんにちは"   # カスタムテキスト
  $(basename "$0") calc 5 2            # 5ウィンドウ中3番目の計算
  $(basename "$0") demo                # フルデモ

説明:
  Claude Codeを実行している各tmuxウィンドウの音声を
  左から右へデシベル的に均等配置して再生します。
  Equal Power Pan Law (3dB center)を使用した
  自然な音響定位を実現します。
EOF
}

# ウィンドウ検出
detect_windows() {
    echo "🔍 Detecting Claude Code windows..."
    echo ""
    
    local windows=$(detect_claude_windows)
    local count=$(echo "$windows" | grep -c '^[0-9]' || echo 0)
    
    if [[ $count -eq 0 ]]; then
        echo "❌ No Claude Code windows found"
        echo ""
        echo "Tip: Start Claude Code in a tmux window with:"
        echo "  claude.ai/code"
    else
        echo "✅ Found $count Claude Code window(s):"
        echo "$windows" | while read -r window_id; do
            [[ -n "$window_id" ]] && {
                local window_name=$(tmux display-message -t "$window_id" -p "#{window_name}" 2>/dev/null)
                echo "  Window $window_id: $window_name"
            }
        done
    fi
}

# パンニング計算テスト
test_calculation() {
    local window_count="${1:-3}"
    local window_index="${2:-1}"
    
    echo "📐 Testing panning calculation..."
    echo "  Windows: $window_count"
    echo "  Position: $window_index (0-based)"
    echo ""
    
    local panning=$(calculate_db_panning "$window_count" "$window_index")
    IFS='|' read -r left right <<< "$panning"
    
    # デシベル変換
    local left_db=$(linear_to_db "$left")
    local right_db=$(linear_to_db "$right")
    
    echo "  Linear gains: L=$left, R=$right"
    echo "  Decibel: L=${left_db}dB, R=${right_db}dB"
    echo ""
    
    # ビジュアル表示
    echo "  Stereo field visualization:"
    echo -n "  L "
    
    # バーグラフ表示
    local left_bar=$(echo "scale=0; $left * 20" | bc)
    local right_bar=$(echo "scale=0; $right * 20" | bc)
    
    for ((i=0; i<20; i++)); do
        if [[ $i -lt ${left_bar%.*} ]]; then
            echo -n "█"
        else
            echo -n "░"
        fi
    done
    
    echo -n " C "
    
    for ((i=0; i<20; i++)); do
        if [[ $i -lt ${right_bar%.*} ]]; then
            echo -n "█"
        else
            echo -n "░"
        fi
    done
    
    echo " R"
}

# デモンストレーション
demo() {
    echo "🎭 Spatial Audio Demonstration"
    echo "================================"
    echo ""
    
    echo "1. Window detection..."
    detect_windows
    echo ""
    
    echo "2. Panning calculation examples..."
    echo ""
    
    for count in 2 3 5; do
        echo "With $count windows:"
        for ((i=0; i<count; i++)); do
            local panning=$(calculate_db_panning "$count" "$i")
            IFS='|' read -r left right <<< "$panning"
            local left_db=$(linear_to_db "$left")
            local right_db=$(linear_to_db "$right")
            printf "  Window %d: L=%5.1fdB  R=%5.1fdB  " "$i" "$left_db" "$right_db"
            
            # 簡易グラフ
            local left_level=$(echo "scale=0; ($left * 10)" | bc)
            local right_level=$(echo "scale=0; ($right * 10)" | bc)
            echo -n "["
            for ((j=0; j<5; j++)); do
                [[ $j -lt ${left_level%.*} ]] && echo -n "◀" || echo -n "-"
            done
            echo -n "|"
            for ((j=0; j<5; j++)); do
                [[ $j -lt ${right_level%.*} ]] && echo -n "▶" || echo -n "-"
            done
            echo "]"
        done
        echo ""
    done
    
    echo "3. Playing spatial audio test..."
    play_spatial_claude_voices "デモンストレーション音声"
}

# メイン処理
main() {
    local command="${1:-help}"
    shift
    
    case "$command" in
        "detect")
            detect_windows
            ;;
        "test")
            local text="${1:-空間音響テスト}"
            play_spatial_claude_voices "$text"
            ;;
        "play")
            local text="${1:-テスト}"
            play_spatial_claude_voices "$text"
            ;;
        "calc")
            test_calculation "$@"
            ;;
        "demo")
            demo
            ;;
        "help"|"--help"|"-h")
            show_help
            ;;
        *)
            echo "Error: Unknown command: $command"
            echo ""
            show_help
            exit 1
            ;;
    esac
}

# スクリプト実行
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi