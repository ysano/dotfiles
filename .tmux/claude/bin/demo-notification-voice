#!/bin/bash
# Claude Voice - Notification + Voice Demo
# ÈÄöÁü•Èü≥„ÅÆÂæå„Å´Èü≥Â£∞„ÇíÂÜçÁîü„Åô„Çã„Éá„É¢„É≥„Çπ„Éà„É¨„Éº„Ç∑„Éß„É≥

CLAUDE_VOICE_HOME="${CLAUDE_VOICE_HOME:-$HOME/.tmux/claude}"
source "$CLAUDE_VOICE_HOME/core/spatial_audio.sh"

# macOS„Ç∑„Çπ„ÉÜ„É†ÈÄöÁü•Èü≥„ÅÆÂÆöÁæ©
SOUND_COMPLETE="/System/Library/Sounds/Glass.aiff"     # ‚úÖ ÂÆå‰∫Ü: GlassÈü≥
SOUND_WAITING="/System/Library/Sounds/Tink.aiff"       # ‚åõ ÂæÖÊ©ü: TinkÈü≥
SOUND_BUSY="/System/Library/Sounds/Basso.aiff"         # ‚ö° Âøô„Åó„ÅÑ: BassoÈü≥
SOUND_ERROR="/System/Library/Sounds/Hero.aiff"         # ‚ùå „Ç®„É©„Éº: HeroÈü≥
SOUND_INFO="/System/Library/Sounds/Pop.aiff"           # ‚ÑπÔ∏è ÊÉÖÂ†±: PopÈü≥

# ÈÄöÁü•Èü≥„ÇíÂÜçÁîü
play_notification_sound() {
    local sound_file="$1"
    local description="$2"
    
    echo "üîî Playing: $description"
    
    # macOS„ÅÆafplay„Ç≥„Éû„É≥„Éâ„Åß„Ç∑„Çπ„ÉÜ„É†Èü≥„ÇíÂÜçÁîü
    if [[ "$OSTYPE" == "darwin"* ]]; then
        if [[ -f "$sound_file" ]]; then
            afplay "$sound_file" 2>/dev/null
        else
            echo "   ‚ö†Ô∏è Sound file not found: $sound_file"
        fi
    fi
}

# ÈÄöÁü•Èü≥ + Èü≥Â£∞„ÅÆ„Éá„É¢
demo_notification_with_voice() {
    local status="$1"
    local message="$2"
    local voice="${3:-Kyoko}"
    
    case "$status" in
        "busy")
            echo "‚ö° Âøô„Åó„ÅÑÁä∂ÊÖã„ÅÆÈÄöÁü• (Basso)"
            play_notification_sound "$SOUND_BUSY" "Basso (Busy)"
            sleep 0.5
            say -v "$voice" -r 200 "$message" 2>/dev/null
            ;;
        "waiting")
            echo "‚åõ ÂæÖÊ©üÁä∂ÊÖã„ÅÆÈÄöÁü• (Tink)"
            play_notification_sound "$SOUND_WAITING" "Tink (Waiting)"
            sleep 0.5
            say -v "$voice" -r 200 "$message" 2>/dev/null
            ;;
        "complete")
            echo "‚úÖ ÂÆå‰∫ÜÁä∂ÊÖã„ÅÆÈÄöÁü• (Glass)"
            play_notification_sound "$SOUND_COMPLETE" "Glass (Complete)"
            sleep 0.5
            say -v "$voice" -r 200 "$message" 2>/dev/null
            ;;
        "error")
            echo "‚ùå „Ç®„É©„ÉºÁä∂ÊÖã„ÅÆÈÄöÁü• (Hero)"
            play_notification_sound "$SOUND_ERROR" "Hero (Error)"
            sleep 0.5
            say -v "$voice" -r 200 "$message" 2>/dev/null
            ;;
        "info")
            echo "‚ÑπÔ∏è ÊÉÖÂ†±ÈÄöÁü• (Pop)"
            play_notification_sound "$SOUND_INFO" "Pop (Info)"
            sleep 0.5
            say -v "$voice" -r 200 "$message" 2>/dev/null
            ;;
    esac
}

# Á©∫ÈñìÈü≥Èüø‰ªò„ÅçÈÄöÁü•„Éá„É¢
demo_spatial_notification() {
    echo "üé≠ Spatial Notification Demo"
    echo "============================"
    echo ""
    
    # Claude Code„Ç¶„Ç£„É≥„Éâ„Ç¶„ÇíÊ§úÂá∫
    local claude_windows=()
    while IFS= read -r window_id; do
        [[ -n "$window_id" ]] && claude_windows+=("$window_id")
    done <<< "$(detect_claude_windows)"
    
    local window_count=${#claude_windows[@]}
    
    if [[ $window_count -eq 0 ]]; then
        echo "‚ùå No Claude Code windows detected"
        echo "üìù Using simulated windows for demo..."
        claude_windows=(2 3 4 5)
        window_count=4
    fi
    
    echo "üìç Testing with $window_count window(s): ${claude_windows[*]}"
    echo ""
    
    # ÂêÑ„Ç¶„Ç£„É≥„Éâ„Ç¶„Å´ÂØæ„Åó„Å¶ÈÄöÁü•Èü≥„Å®Èü≥Â£∞„ÇíÂÜçÁîü
    local index=0
    for window_id in "${claude_windows[@]}"; do
        # „Éë„É≥„Éã„É≥„Ç∞‰øÇÊï∞„ÇíË®àÁÆó
        local panning=$(calculate_db_panning "$window_count" "$index")
        IFS='|' read -r left_gain right_gain <<< "$panning"
        
        # Èü≥Â£∞„ÇíËá™ÂãïÂâ≤„ÇäÂΩì„Å¶
        local voice=$(assign_voice_to_window "$index")
        
        # „Çπ„ÉÜ„Éº„Çø„Çπ„Çí„É©„É≥„ÉÄ„É†„Å´ÈÅ∏ÊäûÔºà„Éá„É¢Áî®Ôºâ
        local statuses=("complete" "waiting" "busy")
        local status="${statuses[$((RANDOM % 3))]}"
        
        # ‰ΩçÁΩÆ„ÅÆË™¨Êòé
        local position=""
        if [[ $window_count -eq 1 ]]; then
            position="‰∏≠Â§Æ"
        elif [[ $index -eq 0 ]]; then
            position="Â∑¶Á´Ø"
        elif [[ $index -eq $((window_count-1)) ]]; then
            position="Âè≥Á´Ø"
        else
            position="‰∏≠Â§Æ"
        fi
        
        echo "Window $window_id ($position): $voice"
        
        # „Çπ„ÉÜ„Éº„Çø„Çπ„Å´Âøú„Åò„ÅüÈÄöÁü•Èü≥„ÇíÂÜçÁîü
        case "$status" in
            "busy")
                echo "  ‚ö° Âá¶ÁêÜ‰∏≠..."
                afplay "$SOUND_BUSY" 2>/dev/null
                ;;
            "waiting")
                echo "  ‚åõ ÂæÖÊ©ü‰∏≠..."
                afplay "$SOUND_WAITING" 2>/dev/null
                ;;
            "complete")
                echo "  ‚úÖ ÂÆå‰∫Ü!"
                afplay "$SOUND_COMPLETE" 2>/dev/null
                ;;
        esac
        
        sleep 0.3
        
        # Èü≥Â£∞„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÂÜçÁîü
        local message="„Ç¶„Ç£„É≥„Éâ„Ç¶${window_id}„ÅÆÂá¶ÁêÜ„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü"
        
        # Á©∫ÈñìÈÖçÁΩÆ„Åï„Çå„ÅüÈü≥Â£∞„ÇíÂÜçÁîü
        local temp_audio="/tmp/claude_notify_${window_id}.aiff"
        say -v "$voice" -r 200 -o "$temp_audio" "$message" 2>/dev/null
        
        if command -v ffplay >/dev/null 2>&1; then
            # „Éë„É≥„Éã„É≥„Ç∞‰ªò„Åç„ÅßÂÜçÁîü
            ffplay -nodisp -autoexit -loglevel quiet \
                -af "pan=stereo|c0=${left_gain}*c0|c1=${right_gain}*c0" \
                "$temp_audio" 2>/dev/null &
        else
            # „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ
            afplay "$temp_audio" 2>/dev/null &
        fi
        
        rm -f "$temp_audio"
        
        sleep 1.5
        ((index++))
    done
    
    wait
    echo ""
    echo "‚úÖ Demo completed"
}

# „Ç∑„É≥„Éó„É´„Å™ÈÄ£Á∂ö„Éá„É¢
simple_demo() {
    echo "üéµ Simple Notification + Voice Demo"
    echo "==================================="
    echo ""
    
    echo "1. ÂÆå‰∫ÜÈÄöÁü•„ÅÆ„Éá„É¢ (Glass)"
    echo "-------------------------"
    afplay "$SOUND_COMPLETE" 2>/dev/null
    sleep 0.5
    say -v "Kyoko" -r 200 "Âá¶ÁêÜ„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü" 2>/dev/null
    sleep 1.5
    
    echo ""
    echo "2. ÂæÖÊ©üÈÄöÁü•„ÅÆ„Éá„É¢ (Tink)"
    echo "------------------------"
    afplay "$SOUND_WAITING" 2>/dev/null
    sleep 0.5
    say -v "Otoya" -r 200 "Âá¶ÁêÜ„ÇíÂæÖÊ©ü„Åó„Å¶„ÅÑ„Åæ„Åô" 2>/dev/null
    sleep 1.5
    
    echo ""
    echo "3. „Ç®„É©„ÉºÈÄöÁü•„ÅÆ„Éá„É¢ (Hero)"
    echo "-------------------------"
    afplay "$SOUND_ERROR" 2>/dev/null
    sleep 0.5
    say -v "Kyoko (Enhanced)" -r 200 "„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü" 2>/dev/null
    sleep 1.5
    
    echo ""
    echo "4. Âøô„Åó„ÅÑÈÄöÁü•„ÅÆ„Éá„É¢ (Basso)"
    echo "---------------------------"
    afplay "$SOUND_BUSY" 2>/dev/null
    sleep 0.5
    say -v "Otoya" -r 200 "Âá¶ÁêÜ‰∏≠„Åß„Åô" 2>/dev/null
    sleep 1.5
    
    echo ""
    echo "5. ÊÉÖÂ†±ÈÄöÁü•„ÅÆ„Éá„É¢ (Pop)"
    echo "----------------------"
    afplay "$SOUND_INFO" 2>/dev/null
    sleep 0.5
    say -v "Kyoko" -r 200 "Êñ∞„Åó„ÅÑÊÉÖÂ†±„Åå„ÅÇ„Çä„Åæ„Åô" 2>/dev/null
    
    echo ""
    echo "‚úÖ Demo completed"
}

# „É°„Ç§„É≥„É°„Éã„É•„Éº
show_menu() {
    echo ""
    echo "üîä Notification + Voice Demo"
    echo ""
    echo "Select demo type:"
    echo "  1) Simple demo (sequential)"
    echo "  2) Spatial demo (with panning)"
    echo "  3) Individual status test"
    echo "  4) Exit"
    echo ""
    echo -n "Option: "
}

# „É°„Ç§„É≥Âá¶ÁêÜ
main() {
    if [[ $# -gt 0 ]]; then
        case "$1" in
            "simple")
                simple_demo
                ;;
            "spatial")
                demo_spatial_notification
                ;;
            "complete")
                demo_notification_with_voice "complete" "Âá¶ÁêÜ„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü"
                ;;
            "waiting")
                demo_notification_with_voice "waiting" "ÂæÖÊ©ü‰∏≠„Åß„Åô"
                ;;
            "busy")
                demo_notification_with_voice "busy" "Âá¶ÁêÜ‰∏≠„Åß„Åô"
                ;;
            *)
                echo "Usage: $(basename "$0") [simple|spatial|complete|waiting|busy]"
                exit 1
                ;;
        esac
    else
        while true; do
            show_menu
            read -r option
            
            case "$option" in
                1)
                    echo ""
                    simple_demo
                    ;;
                2)
                    echo ""
                    demo_spatial_notification
                    ;;
                3)
                    echo ""
                    echo "Select status:"
                    echo "  1) Complete (‚úÖ)"
                    echo "  2) Waiting (‚åõ)"
                    echo "  3) Busy (‚ö°)"
                    echo -n "Status: "
                    read -r status_choice
                    
                    case "$status_choice" in
                        1) demo_notification_with_voice "complete" "Âá¶ÁêÜ„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü" ;;
                        2) demo_notification_with_voice "waiting" "ÂæÖÊ©ü‰∏≠„Åß„Åô" ;;
                        3) demo_notification_with_voice "busy" "Âá¶ÁêÜ‰∏≠„Åß„Åô" ;;
                        *) echo "Invalid choice" ;;
                    esac
                    ;;
                4)
                    echo "Goodbye!"
                    exit 0
                    ;;
                *)
                    echo "Invalid option"
                    ;;
            esac
        done
    fi
}

# „Çπ„ÇØ„É™„Éó„ÉàÂÆüË°å
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi