#!/bin/bash
# Claude Voice - Main Entry Point
# クロスプラットフォーム対応の統合音声通知システム

# 環境設定
CLAUDE_VOICE_HOME="${CLAUDE_VOICE_HOME:-$HOME/.tmux/claude}"
export CLAUDE_VOICE_HOME

# 基本モジュールの読み込み
if [[ -f "$CLAUDE_VOICE_HOME/core/base.sh" ]]; then
    source "$CLAUDE_VOICE_HOME/core/base.sh"
else
    echo "Error: Claude Voice core modules not found in $CLAUDE_VOICE_HOME" >&2
    exit 1
fi

# デバッグモードの初期化
claude_voice_init "${DEBUG_MODE:-false}"

# OS固有モジュールの読み込み
if ! load_os_module; then
    log "ERROR" "Failed to load OS-specific module"
    exit 1
fi

# その他のコアモジュール読み込み
for module in screen_capture llm_manager summary_engine; do
    module_path="$CLAUDE_VOICE_HOME/core/${module}.sh"
    if [[ -f "$module_path" ]]; then
        source "$module_path"
        log "DEBUG" "Loaded module: $module"
    else
        log "ERROR" "Required module not found: $module_path"
        exit 1
    fi
done

# 設定ファイルの読み込み
CONFIG_FILE="$CLAUDE_VOICE_HOME/config/claude-voice.conf"

# グローバル設定
SUMMARY_TYPES=("brief" "detailed" "technical")
DEFAULT_LINES=50
DEFAULT_VOICE="Kyoko"
DEFAULT_DEVICE="system_default"
DEFAULT_MODEL="auto"

# メイン処理関数
main() {
    local summary_type="${1:-brief}"
    local lines="${2:-$DEFAULT_LINES}"
    local voice="${3:-$DEFAULT_VOICE}"
    local model="${4:-$DEFAULT_MODEL}"
    local device="${5:-$DEFAULT_DEVICE}"
    local target_window="${6:-.}"  # 6番目の引数でウィンドウIDを指定可能
    
    log "INFO" "Starting claude-voice (OS: $(detect_os), type: $summary_type)"
    
    # 引数の検証
    if ! validate_arguments "$summary_type" "$lines" "$voice" "$model"; then
        show_usage
        exit 1
    fi
    
    # 音声サブシステムの初期化
    if ! initialize_audio_subsystem; then
        log "ERROR" "Failed to initialize audio subsystem"
        exit 1
    fi
    
    local start_time=$(start_timer)
    
    # 1. 画面キャプチャ
    echo "📺 画面内容を取得中... (target: $target_window)"
    local screen_text
    if ! screen_text=$(capture_screen_text "$target_window" "$lines"); then
        local error_msg="画面内容の取得に失敗しました。"
        echo "❌ $error_msg"
        speak_text "$error_msg" "$voice"
        exit 1
    fi
    
    local char_count=${#screen_text}
    echo "✅ ${char_count}文字のテキストを取得"
    log "DEBUG" "Captured text preview: ${screen_text:0:100}..."
    
    # 2. コンテキスト情報の収集
    local context=$(collect_context_information)
    log "DEBUG" "Context: $context"
    
    # 2.5. Claude Codeの状態を検出
    local claude_status=""
    if [[ "$target_window" != "." ]]; then
        # 特定のウィンドウが指定された場合、そのウィンドウの状態を取得
        claude_status=$(~/.tmux/scripts/claude-status-enhanced.sh "${target_window%.*}" 2>/dev/null || echo "")
        log "DEBUG" "Detected Claude status: $claude_status"
    fi
    
    # 3. 要約生成
    echo "🤖 ${model}で要約を生成中..."
    local summary
    
    # 統一インターフェースを使用（連想配列のサポートチェック）
    if [[ "${BASH_VERSION%%.*}" -ge 4 ]] && declare -f create_summary_options >/dev/null && declare -f generate_unified_summary >/dev/null; then
        # 新しい統一インターフェース（Bash 4以降）
        declare -A summary_options
        create_summary_options summary_options
        
        summary_options[content]="$screen_text"
        summary_options[max_length]=$(summary_type_to_length "$summary_type")
        summary_options[context]=$(status_to_context "$claude_status")
        summary_options[format]="speech_optimized"
        
        summary=$(generate_unified_summary summary_options)
    else
        # フォールバック: 直接呼び出し
        local max_length=50
        case "$summary_type" in
            "detailed") max_length=100 ;;
            "technical") max_length=80 ;;
            "brief"|*) max_length=50 ;;
        esac
        
        local context="general"
        if [[ "$claude_status" == "✅" ]] || [[ "$claude_status" == "Idle" ]]; then
            context="complete"
        elif [[ "$claude_status" == "⌛" ]] || [[ "$claude_status" == "Waiting" ]]; then
            context="waiting"
        elif [[ "$claude_status" == "⚡" ]] || [[ "$claude_status" == "Busy" ]]; then
            context="busy"
        fi
        
        summary=$(summarize_screen_content "$screen_text" "$max_length" "$context")
    fi
    
    if [[ -z "$summary" ]] || [[ "$summary" == "要約の生成に失敗しました" ]]; then
        local error_msg="要約の生成に失敗しました。"
        echo "❌ $error_msg"
        speak_text "$error_msg" "$voice"
        exit 1
    fi
    
    echo "✅ 要約生成完了"
    
    # 4. 音声出力
    echo "🔊 音声で読み上げ中..."
    
    # ウィンドウIDの抽出（パンニング用）
    local window_id_for_panning=""
    if [[ "$target_window" != "." && "$target_window" =~ ^([0-9]+)\..*$ ]]; then
        window_id_for_panning="${BASH_REMATCH[1]}"
        log "DEBUG" "Extracted window ID for panning: $window_id_for_panning"
    fi
    
    if ! speak_text "$summary" "$voice" "$device" "200" "$window_id_for_panning"; then
        log "WARN" "Speech synthesis failed, showing text only"
        echo "📝 要約内容: $summary"
    fi
    
    # 5. 完了通知
    local total_duration=$(end_timer "$start_time")
    echo "✅ 処理完了 (総時間: ${total_duration}s)"
    
    # 統計記録
    record_usage_stats "$summary_type" "$model" "$(detect_os)" "$total_duration" "true"
    
    log "INFO" "claude-voice completed successfully (${total_duration}s)"
    
    # クリーンアップ
    claude_voice_cleanup
    
    return 0
}

# 引数の検証
validate_arguments() {
    local summary_type="$1"
    local lines="$2"
    local voice="$3"
    local model="$4"
    
    # 要約タイプの検証
    local valid_type=false
    for type in "${SUMMARY_TYPES[@]}"; do
        if [[ "$summary_type" == "$type" ]]; then
            valid_type=true
            break
        fi
    done
    
    if [[ "$valid_type" != "true" ]]; then
        log "ERROR" "Invalid summary type: $summary_type"
        return 1
    fi
    
    # 行数の検証
    if ! [[ "$lines" =~ ^[0-9]+$ ]] || [[ $lines -lt 1 ]] || [[ $lines -gt 1000 ]]; then
        log "ERROR" "Invalid lines value: $lines (must be 1-1000)"
        return 1
    fi
    
    log "DEBUG" "Arguments validated successfully"
    return 0
}

# 音声サブシステムの初期化
initialize_audio_subsystem() {
    local os_type=$(detect_os)
    
    log "DEBUG" "Initializing audio subsystem for OS: $os_type"
    
    case "$os_type" in
        "darwin")
            if declare -f init_macos_audio >/dev/null; then
                init_macos_audio
            else
                log "ERROR" "macOS audio initialization function not found"
                return 1
            fi
            ;;
        "linux")
            if declare -f init_linux_audio >/dev/null; then
                init_linux_audio
            else
                log "ERROR" "Linux audio initialization function not found"
                return 1
            fi
            ;;
        "windows")
            if declare -f init_windows_audio >/dev/null; then
                init_windows_audio
            else
                log "ERROR" "Windows audio initialization function not found"
                return 1
            fi
            ;;
        *)
            log "WARN" "Unknown OS type, using basic audio initialization"
            return 0
            ;;
    esac
}

# 使用統計の記録
record_usage_stats() {
    local summary_type="$1"
    local model="$2"
    local os_type="$3"
    local duration="$4"
    local success="$5"
    
    local timestamp=$(get_timestamp)
    local stats_entry=$(cat << EOF
{
    "timestamp": $timestamp,
    "operation": "claude_voice_main",
    "summary_type": "$summary_type",
    "model": "$model", 
    "os_type": "$os_type",
    "duration": $duration,
    "success": $success,
    "version": "$CLAUDE_VOICE_VERSION"
}
EOF
)
    
    # 統計ファイルに記録
    mkdir -p "$CLAUDE_VOICE_HOME/logs"
    echo "$stats_entry" >> "$CLAUDE_VOICE_HOME/logs/usage_stats.jsonl"
}

# ヘルプ・使用法の表示
show_usage() {
    cat << EOF
Claude Voice v$CLAUDE_VOICE_VERSION - クロスプラットフォーム音声通知システム

使用法: $(basename "$0") [OPTIONS] [SUMMARY_TYPE] [LINES] [VOICE] [MODEL] [DEVICE]

SUMMARY_TYPE:
  brief         簡潔な要約（デフォルト）
  detailed      詳細な要約  
  technical     技術的な要約

LINES:          取得する画面の行数（デフォルト: $DEFAULT_LINES）
VOICE:          使用する音声（デフォルト: auto）
MODEL:          使用するLLMモデル（デフォルト: auto）
DEVICE:         オーディオデバイス（デフォルト: system_default）
                - system_default: システムデフォルト出力
                - alert_device: アラート音デバイス
                - sound_effects: サウンドエフェクトデバイス

OPTIONS:
  -h, --help    このヘルプを表示
  -v, --version バージョン情報を表示
  -d, --debug   デバッグモードで実行
  --stats       使用統計を表示
  --test        システムテストを実行
  --config      設定ファイルを表示/編集

例:
  $(basename "$0")                          # デフォルト設定で実行
  $(basename "$0") brief 30                 # 簡潔要約、30行
  $(basename "$0") detailed 50 Kyoko        # 詳細要約、50行、Kyoko音声
  $(basename "$0") technical 40 auto phi4-mini:latest  # 技術的要約、指定モデル

環境変数:
  CLAUDE_VOICE_HOME    ホームディレクトリ（デフォルト: ~/.tmux/claude）
  DEBUG_MODE          デバッグモード（true/false）

対応OS: macOS, Linux, Windows/WSL
EOF
}

# バージョン情報の表示
show_version() {
    echo "Claude Voice $CLAUDE_VOICE_VERSION"
    echo "OS: $(detect_os)"
    echo "Home: $CLAUDE_VOICE_HOME"
    echo ""
    echo "Core modules:"
    for module in base screen_capture llm_manager summary_engine; do
        local module_path="$CLAUDE_VOICE_HOME/core/${module}.sh"
        if [[ -f "$module_path" ]]; then
            echo "  ✅ $module"
        else
            echo "  ❌ $module (missing)"
        fi
    done
    echo ""
    echo "OS-specific module:"
    local os_module="$CLAUDE_VOICE_HOME/os/$(detect_os).sh"
    if [[ -f "$os_module" ]]; then
        echo "  ✅ $(detect_os)"
    else
        echo "  ❌ $(detect_os) (missing)"
    fi
}

# 統計情報の表示
show_stats() {
    echo "=== Claude Voice 使用統計 ==="
    
    local stats_file="$CLAUDE_VOICE_HOME/logs/usage_stats.jsonl"
    if [[ ! -f "$stats_file" ]]; then
        echo "統計データがありません。"
        return 1
    fi
    
    # 基本統計
    local total_uses=$(wc -l < "$stats_file")
    local successful_uses=$(grep '"success":"true"' "$stats_file" | wc -l)
    local success_rate=$(echo "scale=1; $successful_uses * 100 / $total_uses" | bc 2>/dev/null || echo "0")
    
    echo "総使用回数: $total_uses"
    echo "成功率: ${success_rate}%"
    
    # 最近の使用状況
    local day_ago=$(($(date +%s) - 86400))
    local recent_uses=$(awk -v threshold="$day_ago" '$0 ~ /"timestamp":[0-9]+/ && $0 ~ threshold {print}' "$stats_file" 2>/dev/null | wc -l)
    echo "24時間の使用回数: $recent_uses"
    
    # 平均処理時間
    if has_command jq; then
        local avg_duration=$(grep '"success":"true"' "$stats_file" | jq -r '.duration' | awk '{sum+=$1; count++} END {if(count>0) printf("%.2f", sum/count); else print "0"}')
        echo "平均処理時間: ${avg_duration}秒"
        
        # OS別統計
        echo ""
        echo "OS別使用状況:"
        grep '"success":"true"' "$stats_file" | jq -r '.os_type' | sort | uniq -c | while read count os; do
            echo "  $os: $count回"
        done
        
        # 要約タイプ別統計
        echo ""
        echo "要約タイプ別使用状況:"
        grep '"success":"true"' "$stats_file" | jq -r '.summary_type' | sort | uniq -c | while read count type; do
            echo "  $type: $count回"
        done
    fi
    
    echo ""
    echo "最近の5回の使用:"
    tail -5 "$stats_file" | while read line; do
        if has_command jq; then
            local timestamp=$(echo "$line" | jq -r '.timestamp')
            local type=$(echo "$line" | jq -r '.summary_type')
            local success=$(echo "$line" | jq -r '.success')
            local duration=$(echo "$line" | jq -r '.duration')
            local date_str=$(date -r "$timestamp" "+%Y-%m-%d %H:%M:%S" 2>/dev/null || date "+%Y-%m-%d %H:%M:%S")
            
            local status_icon="✅"
            if [[ "$success" != "true" ]]; then
                status_icon="❌"
            fi
            
            echo "  $date_str - $type - $status_icon - ${duration}s"
        else
            echo "  $line"
        fi
    done
}

# 健全性チェックの実行
run_health_check() {
    echo "=== Claude Voice Health Check ==="
    echo ""
    
    local health_score=0
    local total_checks=0
    local issues=()
    
    # 設定マネージャーの読み込み
    if [[ -f "$CLAUDE_VOICE_HOME/core/integration.sh" ]]; then
        source "$CLAUDE_VOICE_HOME/core/integration.sh" >/dev/null 2>&1
    fi
    
    echo "1. Configuration Health..."
    ((total_checks++))
    
    if [[ -f "$CLAUDE_VOICE_HOME/config/claude-voice.yaml" ]]; then
        echo "   ✅ YAML configuration file exists"
        
        # YAML構文チェック
        if command -v yq >/dev/null 2>&1; then
            if yq eval '.' "$CLAUDE_VOICE_HOME/config/claude-voice.yaml" >/dev/null 2>&1; then
                echo "   ✅ YAML syntax is valid"
                ((health_score++))
            else
                echo "   ❌ YAML syntax errors detected"
                issues+=("yaml_syntax")
            fi
        else
            echo "   ⚠️  yq not available for YAML validation"
            ((health_score += 0.5))
        fi
    else
        echo "   ❌ Configuration file missing"
        issues+=("config_missing")
    fi
    
    echo ""
    echo "2. Integration Layer Health..."
    ((total_checks++))
    
    if declare -f get_integration_status >/dev/null 2>&1; then
        local integration_status=$(get_integration_status)
        case "$integration_status" in
            "fully_functional")
                echo "   ✅ Integration layer: Fully functional"
                ((health_score++))
                ;;
            "degraded")
                echo "   ⚠️  Integration layer: Degraded functionality"
                issues+=("integration_degraded")
                ((health_score += 0.5))
                ;;
            *)
                echo "   ❌ Integration layer: Disabled or non-functional"
                issues+=("integration_failed")
                ;;
        esac
    else
        echo "   ❌ Integration layer not accessible"
        issues+=("integration_missing")
    fi
    
    echo ""
    echo "3. Audio System Health..."
    ((total_checks++))
    
    local os_type=$(detect_os)
    case "$os_type" in
        "darwin")
            if command -v say >/dev/null 2>&1; then
                echo "   ✅ macOS say command available"
                
                if osascript -e 'get volume settings' >/dev/null 2>&1; then
                    echo "   ✅ Audio session accessible"
                    ((health_score++))
                else
                    echo "   ❌ Audio session not accessible"
                    issues+=("audio_session_failed")
                fi
            else
                echo "   ❌ macOS say command not available"
                issues+=("say_command_missing")
            fi
            ;;
        *)
            echo "   ⚠️  Audio system check not implemented for $os_type"
            ((health_score += 0.5))
            ;;
    esac
    
    echo ""
    echo "4. LLM Integration Health..."
    ((total_checks++))
    
    if check_ollama_health >/dev/null 2>&1; then
        echo "   ✅ Ollama connection successful"
        ((health_score++))
    else
        echo "   ❌ Ollama connection failed"
        issues+=("ollama_failed")
    fi
    
    echo ""
    echo "5. File System Health..."
    ((total_checks++))
    
    local required_dirs=("$CLAUDE_VOICE_HOME/core" "$CLAUDE_VOICE_HOME/config" "$CLAUDE_VOICE_HOME/logs")
    local missing_dirs=()
    
    for dir in "${required_dirs[@]}"; do
        if [[ ! -d "$dir" ]]; then
            missing_dirs+=("$dir")
        fi
    done
    
    if [[ ${#missing_dirs[@]} -eq 0 ]]; then
        echo "   ✅ All required directories exist"
        ((health_score++))
    else
        echo "   ❌ Missing directories: ${missing_dirs[*]}"
        issues+=("missing_directories")
    fi
    
    # 結果の表示
    echo ""
    echo "=== Health Check Results ==="
    local health_percentage=$(( (health_score * 100) / total_checks ))
    echo "Overall Health Score: $health_score/$total_checks ($health_percentage%)"
    
    if [[ ${#issues[@]} -eq 0 ]]; then
        echo "🎉 System is healthy!"
        return 0
    else
        echo ""
        echo "⚠️  Issues detected:"
        for issue in "${issues[@]}"; do
            case "$issue" in
                "yaml_syntax")
                    echo "  - YAML configuration has syntax errors"
                    echo "    Fix: Run 'claude-voice --repair-configuration'"
                    ;;
                "config_missing")
                    echo "  - Configuration file missing"
                    echo "    Fix: Run 'claude-voice config-reset'"
                    ;;
                "integration_degraded")
                    echo "  - Integration layer has reduced functionality"
                    echo "    Fix: Check dependencies and run 'claude-voice --integration-test'"
                    ;;
                "audio_session_failed")
                    echo "  - Audio session not accessible"
                    echo "    Fix: Check system audio settings and permissions"
                    ;;
                "ollama_failed")
                    echo "  - Ollama LLM service not available"
                    echo "    Fix: Start Ollama service or check connection"
                    ;;
                *)
                    echo "  - $issue"
                    ;;
            esac
        done
        
        if [[ $health_percentage -lt 50 ]]; then
            return 2  # Critical health issues
        else
            return 1  # Minor health issues
        fi
    fi
}

# 統合テストの実行
run_integration_test() {
    echo "=== Claude Voice Integration Test ==="
    echo ""
    
    local test_passed=0
    local test_total=0
    
    echo "Testing complete integration workflow..."
    echo ""
    
    # テスト1: 設定システム
    echo "1. Configuration System Test..."
    ((test_total++))
    
    if [[ -f "$CLAUDE_VOICE_HOME/core/config_manager.sh" ]]; then
        if "$CLAUDE_VOICE_HOME/core/config_manager.sh" validate >/dev/null 2>&1; then
            echo "   ✅ Configuration system working"
            ((test_passed++))
        else
            echo "   ❌ Configuration system failed"
        fi
    else
        echo "   ❌ Configuration manager not found"
    fi
    
    # テスト2: 統合レイヤー
    echo "2. Integration Layer Test..."
    ((test_total++))
    
    if [[ -f "$CLAUDE_VOICE_HOME/core/integration.sh" ]]; then
        if "$CLAUDE_VOICE_HOME/core/integration.sh" test >/dev/null 2>&1; then
            echo "   ✅ Integration layer working"
            ((test_passed++))
        else
            echo "   ❌ Integration layer failed"
        fi
    else
        echo "   ❌ Integration script not found"
    fi
    
    # テスト3: tmux統合
    echo "3. tmux Integration Test..."
    ((test_total++))
    
    if [[ -n "${TMUX:-}" ]]; then
        if tmux list-keys | grep -q "C-v"; then
            echo "   ✅ tmux key bindings configured"
            ((test_passed++))
        else
            echo "   ❌ tmux key bindings not found"
        fi
    else
        echo "   ⚠️  Not running in tmux session"
    fi
    
    # テスト4: エンドツーエンドテスト（簡易版）
    echo "4. End-to-End Test (dry run)..."
    ((test_total++))
    
    if [[ -x "$CLAUDE_VOICE_HOME/bin/claude-voice" ]]; then
        if "$CLAUDE_VOICE_HOME/bin/claude-voice" --help >/dev/null 2>&1; then
            echo "   ✅ End-to-end path accessible"
            ((test_passed++))
        else
            echo "   ❌ End-to-end execution failed"
        fi
    else
        echo "   ❌ Claude Voice binary not executable"
    fi
    
    # 結果表示
    echo ""
    echo "Integration Test Results: $test_passed/$test_total tests passed"
    
    if [[ $test_passed -eq $test_total ]]; then
        echo "🎉 All integration tests passed!"
        return 0
    else
        echo "❌ Some integration tests failed"
        return 1
    fi
}

# 設定修復機能
repair_configuration() {
    echo "=== Claude Voice Configuration Repair ==="
    echo ""
    
    local repairs_made=0
    
    # 1. ディレクトリ構造の修復
    echo "1. Checking directory structure..."
    local required_dirs=(
        "$CLAUDE_VOICE_HOME/core"
        "$CLAUDE_VOICE_HOME/config" 
        "$CLAUDE_VOICE_HOME/logs"
        "$CLAUDE_VOICE_HOME/bin"
    )
    
    for dir in "${required_dirs[@]}"; do
        if [[ ! -d "$dir" ]]; then
            echo "   Creating missing directory: $dir"
            mkdir -p "$dir"
            ((repairs_made++))
        fi
    done
    
    # 2. 設定ファイルの修復
    echo "2. Checking configuration files..."
    
    if [[ ! -f "$CLAUDE_VOICE_HOME/config/claude-voice.yaml" ]]; then
        echo "   Creating default YAML configuration..."
        if [[ -f "$CLAUDE_VOICE_HOME/core/config_manager.sh" ]]; then
            "$CLAUDE_VOICE_HOME/core/config_manager.sh" init
            ((repairs_made++))
        fi
    fi
    
    # 3. 実行権限の修復
    echo "3. Checking executable permissions..."
    local executable_files=(
        "$CLAUDE_VOICE_HOME/bin/claude-voice"
        "$CLAUDE_VOICE_HOME/core/integration.sh"
        "$CLAUDE_VOICE_HOME/core/config_manager.sh"
        "$CLAUDE_VOICE_HOME/session-hook.sh"
        "$CLAUDE_VOICE_HOME/voice-trigger.sh"
    )
    
    for file in "${executable_files[@]}"; do
        if [[ -f "$file" ]] && [[ ! -x "$file" ]]; then
            echo "   Setting executable permission: $file"
            chmod +x "$file"
            ((repairs_made++))
        fi
    done
    
    # 4. ログファイルの初期化
    echo "4. Initializing log files..."
    local log_files=(
        "$CLAUDE_VOICE_HOME/logs/claude-voice.log"
        "$CLAUDE_VOICE_HOME/logs/integration.log"
    )
    
    for log_file in "${log_files[@]}"; do
        if [[ ! -f "$log_file" ]]; then
            echo "   Creating log file: $log_file"
            touch "$log_file"
            ((repairs_made++))
        fi
    done
    
    echo ""
    if [[ $repairs_made -gt 0 ]]; then
        echo "✅ Configuration repair completed: $repairs_made repairs made"
        echo "   Run 'claude-voice --health-check' to verify the repairs"
    else
        echo "✅ No repairs needed - configuration appears healthy"
    fi
    
    return 0
}

# システムテストの実行
run_system_test() {
    echo "=== Claude Voice システムテスト ==="
    echo ""
    
    local test_passed=0
    local test_total=0
    
    # テスト1: コアモジュール
    echo "1. コアモジュールテスト..."
    ((test_total++))
    
    local all_core_modules_present=true
    for module in base screen_capture llm_manager summary_engine; do
        local module_path="$CLAUDE_VOICE_HOME/core/${module}.sh"
        if [[ ! -f "$module_path" ]]; then
            echo "   ❌ モジュールが見つかりません: $module"
            all_core_modules_present=false
        fi
    done
    
    if [[ "$all_core_modules_present" == "true" ]]; then
        echo "   ✅ すべてのコアモジュールが存在"
        ((test_passed++))
    fi
    
    # テスト2: OS固有モジュール
    echo "2. OS固有モジュールテスト..."
    ((test_total++))
    
    local os_type=$(detect_os)
    local os_module="$CLAUDE_VOICE_HOME/os/${os_type}.sh"
    if [[ -f "$os_module" ]]; then
        echo "   ✅ OS固有モジュールが存在: $os_type"
        ((test_passed++))
    else
        echo "   ❌ OS固有モジュールが見つかりません: $os_type"
    fi
    
    # テスト3: 音声サブシステム
    echo "3. 音声サブシステムテスト..."
    ((test_total++))
    
    if initialize_audio_subsystem; then
        echo "   ✅ 音声サブシステム初期化成功"
        ((test_passed++))
    else
        echo "   ❌ 音声サブシステム初期化失敗"
    fi
    
    # テスト4: tmux統合
    echo "4. tmux統合テスト..."
    ((test_total++))
    
    if [[ -n "$TMUX" ]] && has_command tmux; then
        local test_capture=$(capture_screen_text "." 5 2>/dev/null)
        if [[ -n "$test_capture" ]]; then
            echo "   ✅ tmux画面キャプチャ成功"
            ((test_passed++))
        else
            echo "   ⚠️  tmux画面キャプチャは動作するが内容が空"
        fi
    else
        echo "   ⚠️  tmux環境外で実行中"
    fi
    
    # テスト5: LLM統合
    echo "5. LLM統合テスト..."
    ((test_total++))
    
    if check_ollama_health; then
        echo "   ✅ Ollama接続成功"
        ((test_passed++))
    else
        echo "   ⚠️  Ollama接続失敗（フォールバック機能は利用可能）"
    fi
    
    # 結果表示
    echo ""
    echo "テスト結果: $test_passed/$test_total 項目が正常"
    
    if [[ $test_passed -eq $test_total ]]; then
        echo "🎉 すべてのテストが成功しました！"
        return 0
    elif [[ $test_passed -gt $((test_total / 2)) ]]; then
        echo "⚠️  一部の機能に問題がありますが、基本機能は動作します。"
        return 0
    else
        echo "❌ 重要な機能に問題があります。設定を確認してください。"
        return 1
    fi
}

# 設定管理
manage_config() {
    local action="${1:-show}"
    local config_file="$CLAUDE_VOICE_HOME/config/claude-voice.conf"
    
    case "$action" in
        "show")
            echo "設定ファイル: $config_file"
            if [[ -f "$config_file" ]]; then
                echo ""
                cat "$config_file"
            else
                echo "設定ファイルが存在しません。デフォルト設定で動作します。"
            fi
            ;;
        "edit")
            if [[ -f "$config_file" ]]; then
                "${EDITOR:-nano}" "$config_file"
            else
                echo "設定ファイルを作成しますか？ (y/N)"
                read -r response
                if [[ "$response" =~ ^[yY] ]]; then
                    mkdir -p "$(dirname "$config_file")"
                    create_default_config "$config_file"
                    "${EDITOR:-nano}" "$config_file"
                fi
            fi
            ;;
        "reset")
            echo "設定ファイルをデフォルトにリセットしますか？ (y/N)"
            read -r response
            if [[ "$response" =~ ^[yY] ]]; then
                mkdir -p "$(dirname "$config_file")"
                create_default_config "$config_file"
                echo "設定ファイルをリセットしました: $config_file"
            fi
            ;;
    esac
}

# デフォルト設定ファイルの作成
create_default_config() {
    local config_file="$1"
    
    cat > "$config_file" << 'EOF'
# Claude Voice Configuration File

[llm]
# デフォルトモデル (auto, phi4-mini:latest, orca-mini:latest, など)
default_model=auto
# Ollama API URL
ollama.api_url=http://localhost:11434
# リクエストタイムアウト（秒）
timeout=30
# 最大再試行回数
max_retries=3
# 最大入力文字数
max_input_chars=2000

[audio]
# デフォルト音声 (auto, Kyoko, など)
default_voice=auto
# 音声速度 (macOS: 100-300, Linux: 100-200, Windows: -10-10)
speech_rate=200
# 最大音声長（文字数）
max_speech_length=500
# 通知音 (Glass, Hero, Ping, など)
notification_sound=Glass
# Do Not Disturb を尊重するか (true/false)
respect_dnd=true
# システム音量 (0-100)
volume=80

[capture]
# デフォルト取得行数
default_lines=50
# 最大文字数
max_chars=2000

[logging]
# ログレベル (DEBUG, INFO, WARN, ERROR)
level=INFO
# ログファイル
file=~/.tmux/claude/logs/claude-voice.log

[test]
# テスト時の音声再生を有効にするか (true/false)
enable_speech=false
EOF
}

# メイン処理の分岐
case "${1:-main}" in
    "-h"|"--help"|"help")
        show_usage
        ;;
    "-v"|"--version"|"version")
        show_version
        ;;
    "-d"|"--debug"|"debug")
        export DEBUG_MODE=true
        claude_voice_init true
        main "${@:2}"
        ;;
    "--stats"|"stats")
        show_stats
        ;;
    "--test"|"test")
        run_system_test
        ;;
    "--health-check"|"health-check")
        run_health_check
        ;;
    "--integration-test"|"integration-test")  
        run_integration_test
        ;;
    "--repair-configuration"|"repair-configuration")
        repair_configuration
        ;;
    "--config"|"config")
        manage_config "${2:-show}"
        ;;
    "config-edit")
        manage_config "edit"
        ;;
    "config-reset")
        manage_config "reset"
        ;;
    *)
        main "$@"
        ;;
esac