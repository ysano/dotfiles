#!/bin/bash
# Claude Voice - Audio Control CLI
# 音量調整とテストのためのコマンドラインツール

# 環境設定
CLAUDE_VOICE_HOME="${CLAUDE_VOICE_HOME:-$HOME/.tmux/claude}"
export CLAUDE_VOICE_HOME

# 基本モジュールの読み込み
source "$CLAUDE_VOICE_HOME/core/base.sh" 2>/dev/null || {
    echo "Error: Base module not found" >&2
    exit 1
}

# audio_managerの読み込み
source "$CLAUDE_VOICE_HOME/core/audio_manager.sh" 2>/dev/null || {
    echo "Error: Audio manager not found" >&2
    exit 1
}

# OS固有モジュールの読み込み
if declare -f detect_os >/dev/null; then
    OS_TYPE=$(detect_os)
else
    # 簡易OS検出
    if [[ "$OSTYPE" == "darwin"* ]]; then
        OS_TYPE="darwin"
    elif [[ -f /proc/version ]] && grep -q Microsoft /proc/version; then
        OS_TYPE="wsl"
    elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
        OS_TYPE="linux"
    else
        OS_TYPE="unknown"
    fi
fi

if [[ -f "$CLAUDE_VOICE_HOME/os/$OS_TYPE.sh" ]]; then
    source "$CLAUDE_VOICE_HOME/os/$OS_TYPE.sh"
fi

# ヘルプメッセージ
show_help() {
    cat <<EOF
Claude Voice Audio Control - 音量調整ツール

使用法: $(basename "$0") [COMMAND] [OPTIONS]

コマンド:
  get [key]           現在の音量設定を表示
  set <key> <value>   音量設定を変更
  preset <name>       プリセットを適用 (quiet/normal/loud)
  test [type]         音声テストを実行
  list                利用可能な音声を一覧表示
  system <volume>     システム音量を調整 (macOS only, 0-100)

音量設定キー:
  macos.say.volume       macOS音声合成の音量 (0.0-1.0)
  sound_effects.volume   効果音の音量 (0.0-1.0)
  alert.volume          通知音の音量 (0.0-1.0)
  speech_rate           読み上げ速度 (120-300)
  default_voice         デフォルト音声名

例:
  $(basename "$0") preset quiet           # 静音プリセットを適用
  $(basename "$0") set macos.say.volume 0.7  # 音声合成の音量を70%に設定
  $(basename "$0") test speech            # 音声合成テスト
  $(basename "$0") test sound             # 効果音テスト
  $(basename "$0") system 50              # システム音量を50%に設定
EOF
}

# 音声テスト
test_audio() {
    local test_type="${1:-speech}"
    
    case "$test_type" in
        "speech")
            echo "🔊 音声合成テストを実行中..."
            
            # 現在の設定を表示
            local params=$(get_speech_params "$OS_TYPE")
            IFS='|' read -r voice rate volume <<< "$params"
            echo "  音声: $voice"
            echo "  速度: $rate"
            echo "  音量: $volume"
            echo ""
            
            # テスト実行
            local test_text="これは音量テストです。現在の音量は$(echo "$volume * 100" | bc -l | cut -d. -f1)パーセントです。"
            
            if [[ "$OS_TYPE" == "macos" ]] && declare -f speak_text >/dev/null; then
                speak_text "$test_text" "$voice" "auto" "$rate"
            elif [[ "$OS_TYPE" == "wsl" ]] && command -v powershell.exe >/dev/null; then
                powershell.exe -Command "Add-Type -AssemblyName System.Speech; \$s=New-Object System.Speech.Synthesis.SpeechSynthesizer; \$s.SelectVoice('$voice'); \$s.Rate=$((rate/50-4)); \$s.Volume=$((volume)); \$s.Speak('$test_text')"
            else
                echo "  ⚠️  このプラットフォームでは音声合成テストを利用できません"
            fi
            ;;
            
        "sound")
            echo "🔔 効果音テストを実行中..."
            
            local volume=$(get_platform_volume "sound" "$OS_TYPE")
            echo "  音量: $volume"
            echo ""
            
            # テスト音を再生
            if [[ "$OS_TYPE" == "macos" ]]; then
                # macOSのシステム音を再生
                afplay -v "$volume" /System/Library/Sounds/Glass.aiff 2>/dev/null || {
                    # フォールバック: ビープ音
                    printf '\a'
                }
            else
                # その他のプラットフォーム
                printf '\a'
            fi
            ;;
            
        "all")
            echo "🎵 全音声テストを実行中..."
            echo ""
            test_audio "speech"
            sleep 2
            test_audio "sound"
            ;;
            
        *)
            echo "Error: Unknown test type: $test_type"
            echo "Available types: speech, sound, all"
            return 1
            ;;
    esac
}

# 利用可能な音声を一覧表示
list_voices() {
    echo "📢 利用可能な音声:"
    echo ""
    
    if [[ "$OS_TYPE" == "macos" ]]; then
        say -v '?' 2>/dev/null | grep -E "ja_JP|en_US" | awk '{print "  " $1 " (" $2 ")"}'
    elif [[ "$OS_TYPE" == "wsl" ]] && command -v powershell.exe >/dev/null; then
        powershell.exe -Command "Add-Type -AssemblyName System.Speech; (New-Object System.Speech.Synthesis.SpeechSynthesizer).GetInstalledVoices() | ForEach-Object { Write-Host '  ' \$_.VoiceInfo.Name }"
    else
        echo "  ⚠️  このプラットフォームでは音声一覧を取得できません"
    fi
}

# メイン処理
main() {
    local command="${1:-help}"
    shift
    
    case "$command" in
        "get")
            audio_config_cli get "$@"
            ;;
        "set")
            audio_config_cli set "$@"
            ;;
        "preset")
            audio_config_cli preset "$@"
            echo ""
            echo "✅ プリセットを適用しました。テストを実行しますか？ (y/n)"
            read -r response
            if [[ "$response" == "y" ]]; then
                test_audio "speech"
            fi
            ;;
        "test")
            test_audio "$@"
            ;;
        "list")
            list_voices
            ;;
        "system")
            if [[ "$OS_TYPE" == "macos" ]]; then
                local volume="${1:-50}"
                echo "🔊 システム音量を ${volume}% に設定中..."
                adjust_macos_system_volume "$volume" "output"
            else
                echo "Error: System volume control is only available on macOS"
                exit 1
            fi
            ;;
        "help"|"--help"|"-h")
            show_help
            ;;
        *)
            echo "Error: Unknown command: $command"
            echo ""
            show_help
            exit 1
            ;;
    esac
}

# スクリプト実行
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi